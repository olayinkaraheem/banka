{"version":3,"sources":["transactions.service.js"],"names":["TransactionService","transactions","transactionInfo","userId","users","UserService","allUsers","getAllUsers","validCashier","filter","db_user","id","type","isAdmin","length","accountService","AccountService","account","getAllAccounts","accountNumber","parseInt","accountBalance","balance","transactionAmount","amount","debitable","status","message","error","code","transactionId","getAllTransactions","oldAccountBalance","newAccountBalance","toLowerCase","newTransactionDetail","createdOn","Date","cashier","parseFloat","oldBalance","newBalance","push","dataToReturn","transactionType","data"],"mappings":"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","sourceRoot":"C:\\Users\\Olayinka\\ADC\\banka\\api\\src\\services","sourcesContent":["import { transactions } from '../.data/transactions';\nimport { recordExists, getLastId } from '../Helpers/helpers';\nimport UserService from './user.service';\nimport AccountService from './accounts.service';\n\n/**\n * @exports\n * @class TransactionService\n */\n\nexport default class TransactionService {\n  /**\n   * Creates an instance of TransactionService.\n   * @memberof TransactionService\n   */\n  constructor() {\n    this.transactions = transactions;\n  }\n\n  /**\n   * Get all transaction resources.\n   * @param null\n   * @returns {object}\n   */\n  getAllTransactions() {\n    return this.transactions;\n  }\n\n  /**\n   * Performs a debit or credit account on a bank account.\n   * @param {number} userId\n   * @param {object} transactionInfo\n   * @returns {object}\n   */\n  performTransaction(transactionInfo, userId) {\n    const users = new UserService();\n    const allUsers = users.getAllUsers();\n    const validCashier = allUsers.filter(db_user => {\n      return userId === db_user.id && db_user.type === 'staff' && db_user.isAdmin === false;\n    });\n    if (validCashier.length) {\n      const accountService = new AccountService();\n      const account = accountService.getAllAccounts().filter(account => {\n        return account.accountNumber === parseInt(transactionInfo.accountNumber);\n      });\n      if (account.length) {\n        const accountBalance = account[0].balance;\n        const transactionAmount = transactionInfo.amount;\n        const debitable = accountBalance - transactionAmount >= 0 ? true : false;\n\n        if (account[0].status === 'dormant' || account[0].status === 'deleted') {\n          return {\n            message: `${transactionInfo.type} not allowed. Account is ${\n              account.status\n            }, kindly contact admin.`,\n            error: true,\n            code: 403\n          };\n        } else {\n          const transactionId = getLastId(this.getAllTransactions()) + 1;\n          const oldAccountBalance = accountBalance;\n          let newAccountBalance = accountBalance;\n          if (debitable && transactionInfo.type.toLowerCase() === 'debit') {\n            newAccountBalance = accountBalance - transactionAmount;\n          } else if (transactionInfo.type.toLowerCase() === 'credit') {\n            newAccountBalance = accountBalance + transactionAmount;\n          } else {\n            return {\n              message: 'Insufficient balance.',\n              error: true,\n              code: 403\n            };\n          }\n          const newTransactionDetail = {\n            id: transactionId,\n            createdOn: new Date(),\n            type: transactionInfo.type.toLowerCase(),\n            accountNumber: account.accountNumber,\n            cashier: userId, // cashier who consummated the transaction\n            amount: parseFloat(`${transactionInfo.amount}.00`),\n            oldBalance: parseFloat(`${oldAccountBalance}.00`),\n            newBalance: parseFloat(`${newAccountBalance}.00`)\n          };\n          this.getAllTransactions().push(newTransactionDetail);\n          const dataToReturn = {\n            transactionId,\n            accountNumber: transactionInfo.accountNumber,\n            amount: parseFloat(`${transactionInfo.amount}.00`),\n            cashier: userId,\n            transactionType: transactionInfo.type,\n            accountBalance: parseFloat(`${newAccountBalance}.00`)\n          };\n          return {\n            message: `${transactionInfo.type} action successfull on '${account[0].accountNumber}'`,\n            error: false,\n            code: 200,\n            data: dataToReturn\n          };\n        }\n      } else {\n        return {\n          message: `Account number ${transactionInfo.accountNumber} does not exist`,\n          error: true,\n          code: 404\n        };\n      }\n    } else {\n      return {\n        message: 'You are not authorized to perform this action.',\n        error: true,\n        code: 403\n      };\n    }\n  }\n}\n"]}