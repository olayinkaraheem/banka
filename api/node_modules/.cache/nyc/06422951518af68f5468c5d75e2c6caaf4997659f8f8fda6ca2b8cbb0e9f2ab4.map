{"version":3,"sources":["accounts.service.js"],"names":["AccountService","users","accounts","accountInfo","allAccounts","getAllAccounts","newId","userAccounts","filter","account","owner","account_type_exists","message","type","error","code","account_number","Math","max","map","accountNumber","userService","UserService","userInfo","getUserInfo","data","id","firstName","lastName","email","newAccount","openingBalance","parseFloat","createdOn","Date","user","allUsers","getAllUsers","email_exists","validUser","db_user","password","length"],"mappings":"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","sourceRoot":"C:\\Users\\Olayinka\\ADC\\banka\\api\\src\\services","sourcesContent":["import { users } from '../.data/users';\nimport { accounts } from '../.data/accounts';\nimport { recordExists, getLastId } from '../Helpers/helpers';\nimport UserService from './user.service';\n\n/**\n * @exports\n * @class AccountService\n */\n\nexport default class AccountService {\n  /**\n   * Creates an instance of AccountService.\n   * @memberof AccountService\n   */\n  constructor() {\n    this.users = users;\n    this.accounts = accounts;\n  }\n\n  /**\n   * Get all account resources.\n   * @param null\n   * @returns {object}\n   */\n  getAllAccounts() {\n    return this.accounts;\n  }\n\n  /**\n   * Creates a new bank account.\n   * @param {object} accountInfo\n   * @returns {object}\n   */\n  addAccount(accountInfo) {\n    const allAccounts = this.getAllAccounts();\n    const newId = getLastId(allAccounts) + 1;\n    const userAccounts = allAccounts.filter(account => {\n      return account.owner === accountInfo.owner;\n    });\n    const account_type_exists = recordExists(userAccounts, accountInfo, 'type');\n\n    if (account_type_exists) {\n      return { message: `You already have a ${accountInfo.type} account`, error: true, code: 401 };\n    } else {\n      const account_number =\n        Math.max(...this.getAllAccounts().map(account => account.accountNumber)) + 1;\n      // console.log('Account number',account_number);\n      const userService = new UserService();\n      const userInfo = userService.getUserInfo(accountInfo.owner);\n      if (!userInfo.error) {\n        const { id, firstName, lastName, email } = userInfo.data;\n        const newAccount = {\n          id: newId,\n          accountNumber: account_number,\n          type: accountInfo.type,\n          openingBalance: parseFloat(0.00),\n          createdOn: new Date(),\n          owner: id,\n          firstName,\n          lastName,\n          email\n        };\n\n        return {\n          message: 'Account Created successfully',\n          error: false,\n          code: 201,\n          data: { ...newAccount }\n        };\n      } else {\n        return {\n          message: 'Error Creating Account User information required',\n          error: true,\n          code: 403\n        };\n      }\n    }\n  }\n\n  /**\n   * Logs in a user.\n   * @param {object} user\n   * @returns {object}\n   */\n  loginUser(user) {\n    const allUsers = this.getAllUsers();\n    const email_exists = recordExists(allUsers, user, 'email');\n    // const token = generateToken();\n    if (!email_exists) {\n      return { message: 'Users With This Email Does Not exist', error: true, code: 404 };\n    } else {\n      const validUser = allUsers.filter(db_user => {\n        return user.password === db_user.password && user.email === db_user.email;\n      });\n      if (validUser.length) {\n        return {\n          message: 'Login successful',\n          error: false,\n          code: 200,\n          data: { ...validUser[0] }\n        };\n      } else {\n        return {\n          message: 'Login Failed. Please enter a valid password',\n          error: true,\n          code: 401\n        };\n      }\n    }\n  }\n}\n"]}