{"version":3,"sources":["account.controller.js"],"names":["AccountController","req","res","accountInfo","body","account","Account","newAccount","addAccount","error","status","code","send","data","message","userId","accountNumber","params","updatedAccount","updateAccountStatus","response"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAEqBA,iB;;;;;;;;;kCACLC,G,EAAKC,G,EAAK;AACtB,UAAMC,WAAW,GAAGF,GAAG,CAACG,IAAxB;AACA,UAAMC,OAAO,GAAG,IAAIC,oBAAJ,EAAhB;AACA,UAAMC,UAAU,GAAGF,OAAO,CAACG,UAAR,CAAmBL,WAAnB,CAAnB;;AAEA,UAAI,CAACI,UAAU,CAACE,KAAhB,EAAuB;AACrB,eAAOP,GAAG,CAACQ,MAAJ,CAAWH,UAAU,CAACI,IAAtB,EAA4BC,IAA5B,CAAiC;AAAEF,UAAAA,MAAM,EAAEH,UAAU,CAACI,IAArB;AAA2BE,UAAAA,IAAI,EAAEN,UAAU,CAACM;AAA5C,SAAjC,CAAP;AACD;;AACD,aAAOX,GAAG,CAACQ,MAAJ,CAAWH,UAAU,CAACI,IAAtB,EAA4BC,IAA5B,CAAiC;AAAEF,QAAAA,MAAM,EAAEH,UAAU,CAACI,IAArB;AAA2BF,QAAAA,KAAK,EAAEF,UAAU,CAACO;AAA7C,OAAjC,CAAP;AACD;;;wCAEmBb,G,EAAKC,G,EAAK;AAAA,sBACDD,GAAG,CAACG,IADH;AAAA,UACpBM,MADoB,aACpBA,MADoB;AAAA,UACZK,MADY,aACZA,MADY;AAE5B,UAAMC,aAAa,GAAGf,GAAG,CAACgB,MAAJ,CAAWD,aAAjC;AACA,UAAMX,OAAO,GAAG,IAAIC,oBAAJ,EAAhB;AACA,UAAMY,cAAc,GAAGb,OAAO,CAACc,mBAAR,CAA4B;AAAET,QAAAA,MAAM,EAANA,MAAF;AAAUM,QAAAA,aAAa,EAAbA;AAAV,OAA5B,EAAuDD,MAAvD,CAAvB;;AAEA,UAAI,CAACG,cAAc,CAACT,KAApB,EAA2B;AACzB,YAAMW,QAAQ,GACZnB,GAAG,CAACG,IAAJ,CAASM,MAAT,KAAoB,SAApB,GACI;AAAEA,UAAAA,MAAM,EAAEQ,cAAc,CAACP,IAAzB;AAA+BG,UAAAA,OAAO,EAAEI,cAAc,CAACJ;AAAvD,SADJ,GAEI;AAAEJ,UAAAA,MAAM,EAAEQ,cAAc,CAACP,IAAzB;AAA+BE,UAAAA,IAAI,EAAEK,cAAc,CAACL;AAApD,SAHN;AAIA,eAAOX,GAAG,CAACQ,MAAJ,CAAWQ,cAAc,CAACP,IAA1B,EAAgCC,IAAhC,CAAqCQ,QAArC,CAAP;AACD;;AACD,aAAOlB,GAAG,CACPQ,MADI,CACGQ,cAAc,CAACP,IADlB,EAEJC,IAFI,CAEC;AAAEF,QAAAA,MAAM,EAAEQ,cAAc,CAACP,IAAzB;AAA+BF,QAAAA,KAAK,EAAES,cAAc,CAACJ;AAArD,OAFD,CAAP;AAGD","sourceRoot":"C:\\Users\\Olayinka\\ADC\\banka\\api\\src\\controllers","sourcesContent":["import Account from '../services/accounts.service';\n\nexport default class AccountController {\n  createAccount(req, res) {\n    const accountInfo = req.body;\n    const account = new Account();\n    const newAccount = account.addAccount(accountInfo);\n\n    if (!newAccount.error) {\n      return res.status(newAccount.code).send({ status: newAccount.code, data: newAccount.data });\n    }\n    return res.status(newAccount.code).send({ status: newAccount.code, error: newAccount.message });\n  }\n\n  updateAccountStatus(req, res) {\n    const { status, userId } = req.body;\n    const accountNumber = req.params.accountNumber;\n    const account = new Account();\n    const updatedAccount = account.updateAccountStatus({ status, accountNumber }, userId);\n\n    if (!updatedAccount.error) {\n      const response =\n        req.body.status === 'deleted'\n          ? { status: updatedAccount.code, message: updatedAccount.message }\n          : { status: updatedAccount.code, data: updatedAccount.data };\n      return res.status(updatedAccount.code).send(response);\n    }\n    return res\n      .status(updatedAccount.code)\n      .send({ status: updatedAccount.code, error: updatedAccount.message });\n  }\n}\n"]}