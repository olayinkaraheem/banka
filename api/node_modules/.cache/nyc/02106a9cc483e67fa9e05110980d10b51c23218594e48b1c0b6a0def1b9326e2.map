{"version":3,"sources":["accounts.service.js"],"names":["AccountService","accounts","accountInfo","allAccounts","getAllAccounts","newId","userAccounts","filter","account","owner","account_type_exists","message","type","error","code","account_number","Math","max","map","accountNumber","userService","UserService","userInfo","getUserInfo","data","id","firstName","lastName","email","newAccount","openingBalance","parseFloat","createdOn","Date","update","userId","users","allUsers","getAllUsers","validUser","db_user","isAdmin","length","accountToUpdate","parseInt","allowedStatuses","includes","status"],"mappings":"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","sourceRoot":"C:\\Users\\Olayinka\\ADC\\banka\\api\\src\\services","sourcesContent":["import { accounts } from '../.data/accounts';\nimport { recordExists, getLastId } from '../Helpers/helpers';\nimport UserService from './user.service';\n\n/**\n * @exports\n * @class AccountService\n */\n\nexport default class AccountService {\n  /**\n   * Creates an instance of AccountService.\n   * @memberof AccountService\n   */\n  constructor() {\n    this.accounts = accounts;\n  }\n\n  /**\n   * Get all account resources.\n   * @param null\n   * @returns {object}\n   */\n  getAllAccounts() {\n    return this.accounts;\n  }\n\n  /**\n   * Creates a new bank account.\n   * @param {object} accountInfo\n   * @returns {object}\n   */\n  addAccount(accountInfo) {\n    const allAccounts = this.getAllAccounts();\n    const newId = getLastId(allAccounts) + 1;\n    const userAccounts = allAccounts.filter(account => {\n      return account.owner === accountInfo.owner;\n    });\n    const account_type_exists = recordExists(userAccounts, accountInfo, 'type');\n\n    if (account_type_exists) {\n      return { message: `You already have a ${accountInfo.type} account`, error: true, code: 401 };\n    } else {\n      const account_number =\n        Math.max(...this.getAllAccounts().map(account => account.accountNumber)) + 1;\n      // console.log('Account number',account_number);\n      const userService = new UserService();\n      const userInfo = userService.getUserInfo(accountInfo.owner);\n      if (!userInfo.error) {\n        const { id, firstName, lastName, email } = userInfo.data;\n        const newAccount = {\n          id: newId,\n          accountNumber: account_number,\n          type: accountInfo.type,\n          openingBalance: parseFloat('0.00'),\n          createdOn: new Date(),\n          owner: id,\n          firstName,\n          lastName,\n          email\n        };\n\n        return {\n          message: 'Account Created successfully',\n          error: false,\n          code: 201,\n          data: { ...newAccount }\n        };\n      } else {\n        return {\n          message: 'Error Creating Account User information required',\n          error: true,\n          code: 403\n        };\n      }\n    }\n  }\n\n  /**\n   * Activates/Deactvate a bank account.\n   * @param {number} userId\n   * @param {object} update\n   * @returns {object}\n   */\n  updateAccountStatus(update, userId) {\n    const users = new UserService();\n    const allUsers = users.getAllUsers();\n    const validUser = allUsers.filter(db_user => {\n      return userId === db_user.id && db_user.isAdmin === true;\n    });\n    if (validUser.length) {\n      const accountToUpdate = this.accounts.filter(account => {\n        return account.accountNumber === parseInt(update.accountNumber);\n      });\n      if (accountToUpdate.length) {\n        const allowedStatuses = ['deleted', 'dormant', 'active'];\n        if (!allowedStatuses.includes(update.status)) {\n          return {\n            message: `Unidentified status specified`,\n            error: true,\n            code: 400\n          };\n        }\n        if (update.status === 'deleted') {\n          accountToUpdate[0].status = 'deleted';\n          return {\n            message: `Account deleted successfully`,\n            error: false,\n            code: 200\n          };\n        } else {\n          accountToUpdate[0].status = accountToUpdate[0].status === 'active' ? 'dormant' : 'active';\n          return {\n            message: `Account Status successfully updated to '${accountToUpdate[0].status}'`,\n            error: false,\n            code: 200,\n            data: { ...accountToUpdate[0] }\n          };\n        }\n      } else {\n        return {\n          message: `Account number ${update.accountNumber} does not exist`,\n          error: true,\n          code: 404\n        };\n      }\n    } else {\n      return {\n        message: 'You are not authorized to perform this action.',\n        error: true,\n        code: 403\n      };\n    }\n  }\n}\n"]}