{"version":3,"sources":["user.service.js"],"names":["UserService","users","user","allUsers","getAllUsers","newId","email_exists","token","message","error","code","data","id","validUser","filter","db_user","password","email","length","userId","userInfo"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;AAEA;;;;IAKqBA,W;;;AACnB;;;;AAIA,yBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAaA,YAAb;AACD;AAED;;;;;;;;;kCAKc;AACZ,aAAO,KAAKA,KAAZ;AACD;AAED;;;;;;;;4BAKQC,I,EAAM;AACZ;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,UAAMC,KAAK,GAAG,wBAAUF,QAAV,IAAsB,CAApC;AACA,UAAMG,YAAY,GAAG,2BAAaH,QAAb,EAAuBD,IAAvB,EAA6B,OAA7B,CAArB;AACA,UAAMK,KAAK,GAAG,6BAAd;;AACA,UAAID,YAAJ,EAAkB;AAChB,eAAO;AAAEE,UAAAA,OAAO,EAAE,qBAAX;AAAkCC,UAAAA,KAAK,EAAE,IAAzC;AAA+CC,UAAAA,IAAI,EAAE;AAArD,SAAP;AACD,OAFD,MAEO;AACL,eAAO;AACLF,UAAAA,OAAO,EAAE,mBADJ;AAELC,UAAAA,KAAK,EAAE,KAFF;AAGLC,UAAAA,IAAI,EAAE,GAHD;AAILC,UAAAA,IAAI;AAAIJ,YAAAA,KAAK,EAALA,KAAJ;AAAWK,YAAAA,EAAE,EAAEP;AAAf,aAAyBH,IAAzB;AAJC,SAAP;AAMD;AACF;AAED;;;;;;;;8BAKUA,I,EAAM;AACd,UAAMC,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,UAAME,YAAY,GAAG,2BAAaH,QAAb,EAAuBD,IAAvB,EAA6B,OAA7B,CAArB,CAFc,CAGd;;AACA,UAAI,CAACI,YAAL,EAAmB;AACjB,eAAO;AAAEE,UAAAA,OAAO,EAAE,sCAAX;AAAmDC,UAAAA,KAAK,EAAE,IAA1D;AAAgEC,UAAAA,IAAI,EAAE;AAAtE,SAAP;AACD,OAFD,MAEO;AACL,YAAMG,SAAS,GAAGV,QAAQ,CAACW,MAAT,CAAgB,UAAAC,OAAO,EAAI;AAC3C,iBAAOb,IAAI,CAACc,QAAL,KAAkBD,OAAO,CAACC,QAA1B,IAAsCd,IAAI,CAACe,KAAL,KAAeF,OAAO,CAACE,KAApE;AACD,SAFiB,CAAlB;;AAGA,YAAIJ,SAAS,CAACK,MAAd,EAAsB;AACpB,iBAAO;AACLV,YAAAA,OAAO,EAAE,kBADJ;AAELC,YAAAA,KAAK,EAAE,KAFF;AAGLC,YAAAA,IAAI,EAAE,GAHD;AAILC,YAAAA,IAAI,oBAAOE,SAAS,CAAC,CAAD,CAAhB;AAJC,WAAP;AAMD,SAPD,MAOO;AACL,iBAAO;AACLL,YAAAA,OAAO,EAAE,6CADJ;AAELC,YAAAA,KAAK,EAAE,IAFF;AAGLC,YAAAA,IAAI,EAAE;AAHD,WAAP;AAKD;AACF;AACF;AAED;;;;;;;;gCAKYS,M,EAAQ;AAClB,UAAMC,QAAQ,GAAG,KAAKhB,WAAL,GAAmBU,MAAnB,CAA0B,UAAAZ,IAAI;AAAA,eAAIA,IAAI,CAACU,EAAL,KAAYO,MAAhB;AAAA,OAA9B,CAAjB;;AAEA,UAAI,CAACC,QAAQ,CAACF,MAAd,EAAsB;AACpB,eAAO;AAAEV,UAAAA,OAAO,EAAE,4BAAX;AAAyCC,UAAAA,KAAK,EAAE,IAAhD;AAAsDC,UAAAA,IAAI,EAAE;AAA5D,SAAP;AACD,OAFD,MAEO;AACL,eAAO;AACLF,UAAAA,OAAO,EAAE,wBADJ;AAELC,UAAAA,KAAK,EAAE,KAFF;AAGLC,UAAAA,IAAI,EAAE,GAHD;AAILC,UAAAA,IAAI,oBAAOS,QAAQ,CAAC,CAAD,CAAf;AAJC,SAAP;AAMD;AACF","sourceRoot":"C:\\Users\\Olayinka\\ADC\\banka\\api\\src\\services","sourcesContent":["// import User from '../models/user.model';\nimport { users } from '../.data/users';\nimport { recordExists, getLastId, generateToken } from '../Helpers/helpers';\n\n/**\n * @exports\n * @class UserService\n */\n\nexport default class UserService {\n  /**\n   * Creates an instance of UserService.\n   * @memberof User\n   */\n  constructor() {\n    this.users = users;\n  }\n\n  /**\n   * Get all user resources.\n   * @param null\n   * @returns {object}\n   */\n  getAllUsers() {\n    return this.users;\n  }\n\n  /**\n   * Creates a new user.\n   * @param {object} user\n   * @returns {object}\n   */\n  addUser(user) {\n    // const new_user = new User({ ...user });\n    const allUsers = this.getAllUsers();\n    const newId = getLastId(allUsers) + 1;\n    const email_exists = recordExists(allUsers, user, 'email');\n    const token = generateToken();\n    if (email_exists) {\n      return { message: 'Email already exist', error: true, code: 401 };\n    } else {\n      return {\n        message: 'Signup successful',\n        error: false,\n        code: 201,\n        data: { token, id: newId, ...user }\n      };\n    }\n  }\n\n  /**\n   * Logs in a user.\n   * @param {object} user\n   * @returns {object}\n   */\n  loginUser(user) {\n    const allUsers = this.getAllUsers();\n    const email_exists = recordExists(allUsers, user, 'email');\n    // const token = generateToken();\n    if (!email_exists) {\n      return { message: 'Users With This Email Does Not exist', error: true, code: 404 };\n    } else {\n      const validUser = allUsers.filter(db_user => {\n        return user.password === db_user.password && user.email === db_user.email;\n      });\n      if (validUser.length) {\n        return {\n          message: 'Login successful',\n          error: false,\n          code: 200,\n          data: { ...validUser[0] }\n        };\n      } else {\n        return {\n          message: 'Login Failed. Please enter a valid password',\n          error: true,\n          code: 401\n        };\n      }\n    }\n  }\n\n  /**\n   * Gets user information.\n   * @param {number} userId\n   * @returns {object}\n   */\n  getUserInfo(userId) {\n    const userInfo = this.getAllUsers().filter(user => user.id === userId);\n\n    if (!userInfo.length) {\n      return { message: 'User information not found', error: true, code: 404 };\n    } else {\n      return {\n        message: 'User Information Found',\n        error: false,\n        code: 200,\n        data: { ...userInfo[0] }\n      };\n    }\n  }\n}\n"]}